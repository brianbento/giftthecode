// <auto-generated />
using Indspire.Soaring.Engagement.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Indspire.Soaring.Engagement.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180128182812_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Indspire.Soaring.Engagement.Database.Attendee", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("Deleted");

                    b.Property<string>("ExternalID");

                    b.Property<int>("InstanceID");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("UserNumber");

                    b.HasKey("UserID");

                    b.HasIndex("InstanceID");

                    b.ToTable("Attendee");
                });

            modelBuilder.Entity("Indspire.Soaring.Engagement.Database.Award", b =>
                {
                    b.Property<int>("AwardID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AwardNumber");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description");

                    b.Property<int>("InstanceID");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<int>("Points");

                    b.Property<int>("VendorID");

                    b.HasKey("AwardID");

                    b.HasIndex("InstanceID");

                    b.ToTable("Award");
                });

            modelBuilder.Entity("Indspire.Soaring.Engagement.Database.AwardLog", b =>
                {
                    b.Property<int>("AwardLogID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AwardID");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("Points");

                    b.Property<int>("UserID");

                    b.HasKey("AwardLogID");

                    b.HasIndex("AwardID");

                    b.HasIndex("UserID");

                    b.ToTable("AwardLog");
                });

            modelBuilder.Entity("Indspire.Soaring.Engagement.Database.Instance", b =>
                {
                    b.Property<int>("InstanceID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("DefaultInstance");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name");

                    b.HasKey("InstanceID");

                    b.ToTable("Instance");
                });

            modelBuilder.Entity("Indspire.Soaring.Engagement.Database.Redemption", b =>
                {
                    b.Property<int>("RedemptionID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description");

                    b.Property<int>("InstanceID");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<int>("PointsRequired");

                    b.Property<string>("RedemptionNumber");

                    b.HasKey("RedemptionID");

                    b.HasIndex("InstanceID");

                    b.ToTable("Redemption");
                });

            modelBuilder.Entity("Indspire.Soaring.Engagement.Database.RedemptionLog", b =>
                {
                    b.Property<int>("RedemptionLogID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("RedemptionID");

                    b.Property<int>("UserID");

                    b.HasKey("RedemptionLogID");

                    b.HasIndex("RedemptionID");

                    b.HasIndex("UserID");

                    b.ToTable("RedemptionLog");
                });

            modelBuilder.Entity("Indspire.Soaring.Engagement.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Indspire.Soaring.Engagement.Database.Attendee", b =>
                {
                    b.HasOne("Indspire.Soaring.Engagement.Database.Instance", "Instance")
                        .WithMany("Attendees")
                        .HasForeignKey("InstanceID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Indspire.Soaring.Engagement.Database.Award", b =>
                {
                    b.HasOne("Indspire.Soaring.Engagement.Database.Instance", "Instance")
                        .WithMany("Awards")
                        .HasForeignKey("InstanceID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Indspire.Soaring.Engagement.Database.AwardLog", b =>
                {
                    b.HasOne("Indspire.Soaring.Engagement.Database.Award", "Award")
                        .WithMany("AwardLogs")
                        .HasForeignKey("AwardID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Indspire.Soaring.Engagement.Database.Attendee", "User")
                        .WithMany("AwardLogs")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Indspire.Soaring.Engagement.Database.Redemption", b =>
                {
                    b.HasOne("Indspire.Soaring.Engagement.Database.Instance", "Instance")
                        .WithMany("Redemptions")
                        .HasForeignKey("InstanceID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Indspire.Soaring.Engagement.Database.RedemptionLog", b =>
                {
                    b.HasOne("Indspire.Soaring.Engagement.Database.Redemption", "Redemption")
                        .WithMany("RedemptionLogs")
                        .HasForeignKey("RedemptionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Indspire.Soaring.Engagement.Database.Attendee", "User")
                        .WithMany("RedemptionLogs")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Indspire.Soaring.Engagement.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Indspire.Soaring.Engagement.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Indspire.Soaring.Engagement.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Indspire.Soaring.Engagement.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
